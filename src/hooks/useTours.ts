// üéØ –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –•–£–ö –î–õ–Ø WORDPRESS-–ü–û–î–û–ë–ù–û–ô –°–ò–°–¢–ï–ú–´ –¢–£–†–û–í
// –ü—Ä–∏–Ω—Ü–∏–ø: "–û–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã –¥–ª—è –≤—Å–µ—Ö —Ç—É—Ä–æ–≤" - –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï + CMS
// üîÑ –ì–ò–ë–†–ò–î–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –°—Ç–∞—Ä—ã–µ —Ç—É—Ä—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ + –ù–æ–≤—ã–µ —Ç—É—Ä—ã –∏–∑ CMS

import { useState, useEffect, useMemo } from 'react';
import { TOURS_REGISTRY, getToursByCategory, getToursByTag, searchTours } from '@/data/toursRegistry';
import { useCMSTours, CMSTour } from '@/hooks/useCMSTours';
import type { TourData } from '@/types/Tour';

export interface TourWithMeta {
  id: string;
  name: string;
  category: string;
  tags: string[];
  isPopular: boolean;
  isFeatured: boolean;
  priority: number;
  data?: TourData;
}

export interface ToursState {
  // üìä –î–ê–ù–ù–´–ï
  allTours: TourWithMeta[];
  popularTours: TourWithMeta[];
  featuredTours: TourWithMeta[];
  
  // üîç –§–ò–õ–¨–¢–†–ê–¶–ò–Ø
  filteredTours: TourWithMeta[];
  categories: string[];
  tags: string[];
  
  // üîÑ –°–û–°–¢–û–Ø–ù–ò–ï
  loading: boolean;
  selectedCategory: string;
  searchQuery: string;
}

export const useTours = () => {
  // üîÑ –ì–ò–ë–†–ò–î–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä—ã –∏–∑ CMS
  const { tours: cmsTours, loading: cmsLoading } = useCMSTours();
  
  const [state, setState] = useState<ToursState>({
    allTours: [],
    popularTours: [],
    featuredTours: [],
    filteredTours: [],
    categories: [],
    tags: [],
    loading: true,
    selectedCategory: 'all',
    searchQuery: ''
  });

  // üéØ –ó–ê–ì–†–£–ó–ö–ê –ì–ò–ë–†–ò–î–ù–´–• –î–ê–ù–ù–´–•: –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï + CMS
  useEffect(() => {
    const loadTours = async () => {
      try {
        setState(prev => ({ ...prev, loading: true }));
        
        // üì¶ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –¢–£–†–´ –∏–∑ —Ñ–∞–π–ª–æ–≤
        const staticToursWithMeta: TourWithMeta[] = await Promise.all(
          TOURS_REGISTRY
            .filter(tour => tour.isActive)
            .map(async (tour) => {
              try {
                const data = await tour.data();
                return {
                  id: tour.id,
                  name: tour.name,
                  category: tour.category,
                  tags: tour.tags,
                  isPopular: tour.isPopular,
                  isFeatured: tour.isFeatured,
                  priority: tour.priority,
                  data
                };
              } catch (error) {
                console.warn(`Failed to load static tour ${tour.id}:`, error);
                return {
                  id: tour.id,
                  name: tour.name,
                  category: tour.category,
                  tags: tour.tags,
                  isPopular: tour.isPopular,
                  isFeatured: tour.isFeatured,
                  priority: tour.priority
                };
              }
            })
        );

        // üéØ CMS –¢–£–†–´ –∏–∑ Supabase
        const cmsToursWithMeta: TourWithMeta[] = cmsTours.map((cmsTour: CMSTour, index: number) => ({
          id: cmsTour.slug,
          name: cmsTour.title,
          category: 'islands', // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
          tags: cmsTour.tags || [],
          isPopular: cmsTour.is_featured || false,
          isFeatured: cmsTour.is_featured || false,
          priority: 100 + index, // CMS —Ç—É—Ä—ã –ø–æ—Å–ª–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö
          data: {
            id: cmsTour.slug,
            route: `/tours/${cmsTour.slug}`,
            title: cmsTour.title,
            subtitle: cmsTour.subtitle,
            description: cmsTour.description,
            mainImage: cmsTour.gallery[0]?.image_url || '',
            gallery: cmsTour.gallery.map(g => g.image_url),
            priceAdult: cmsTour.price_adult,
            priceChild: cmsTour.price_child,
            currency: cmsTour.currency,
            duration: cmsTour.duration,
            groupSize: cmsTour.group_size,
            rating: 4.8,
            reviewsCount: 127,
            highlights: cmsTour.highlights || [],
            included: cmsTour.included || [],
            excluded: cmsTour.excluded || [],
            requirements: cmsTour.requirements || [],
            importantInfo: cmsTour.important_info || [],
            tags: cmsTour.tags || [],
            category: 'islands'
          } as TourData
        }));

        // üîÑ –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –í–°–ï–• –¢–£–†–û–í - –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ò–ú–ï–Æ–¢ –ü–†–ò–û–†–ò–¢–ï–¢ –ù–ê–î CMS
        const cmsIds = new Set(cmsToursWithMeta.map(tour => tour.id));
        const filteredStaticTours = staticToursWithMeta; // –ë–µ—Ä–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç—É—Ä—ã
        const filteredCmsTours = cmsToursWithMeta.filter(tour => !staticToursWithMeta.some(st => st.id === tour.id)); // CMS —Ç—É—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö
        const allToursWithMeta = [...filteredStaticTours, ...filteredCmsTours];

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        allToursWithMeta.sort((a, b) => a.priority - b.priority);

        const categories = Array.from(new Set(allToursWithMeta.map(t => t.category)));
        const tags = Array.from(new Set(allToursWithMeta.flatMap(t => t.tags)));

        setState(prev => ({
          ...prev,
          allTours: allToursWithMeta,
          popularTours: allToursWithMeta.filter(t => t.isPopular),
          featuredTours: allToursWithMeta.filter(t => t.isFeatured),
          filteredTours: allToursWithMeta,
          categories,
          tags,
          loading: false
        }));
      } catch (error) {
        console.error('Failed to load tours:', error);
        setState(prev => ({ ...prev, loading: false }));
      }
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ CMS –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã
    if (!cmsLoading) {
      loadTours();
    }
  }, [cmsLoading, cmsTours]);

  // üîç –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –ö–ê–¢–ï–ì–û–†–ò–ò –ò –ü–û–ò–°–ö–£
  const filteredTours = useMemo(() => {
    let filtered = state.allTours;

    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (state.selectedCategory && state.selectedCategory !== 'all') {
      filtered = filtered.filter(tour => 
        tour.category === state.selectedCategory ||
        tour.tags.includes(state.selectedCategory)
      );
    }

    // –ü–æ–∏—Å–∫
    if (state.searchQuery.trim()) {
      const query = state.searchQuery.toLowerCase();
      filtered = filtered.filter(tour =>
        tour.name.toLowerCase().includes(query) ||
        tour.tags.some(tag => tag.toLowerCase().includes(query)) ||
        tour.data?.description?.toLowerCase().includes(query)
      );
    }

    return filtered;
  }, [state.allTours, state.selectedCategory, state.searchQuery]);

  // üîÑ –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø
  const setCategory = (category: string) => {
    setState(prev => ({ ...prev, selectedCategory: category }));
  };

  const setSearchQuery = (query: string) => {
    setState(prev => ({ ...prev, searchQuery: query }));
  };

  const getTourById = (id: string) => {
    return state.allTours.find(tour => tour.id === id);
  };

  const getToursByTag = (tag: string) => {
    return state.allTours.filter(tour => tour.tags.includes(tag));
  };

  return {
    ...state,
    filteredTours,
    
    // –ú–µ—Ç–æ–¥—ã
    setCategory,
    setSearchQuery,
    getTourById,
    getToursByTag,
    
    // –£–¥–æ–±–Ω—ã–µ —Ñ–ª–∞–≥–∏
    hasResults: filteredTours.length > 0,
    totalCount: state.allTours.length,
    filteredCount: filteredTours.length
  };
};