import React, { useState, useEffect } from 'react';
import { Calendar, Users, Phone, Clock, CheckCircle, AlertCircle } from 'lucide-react';
import { Header } from '@/components/Header';
import { Footer } from '@/components/Footer';

interface Order {
  id: number;
  tour: string;
  name: string;
  phone: string;
  date: string;
  adults: number;
  children: number;
  totalPrice: number;
  timestamp: string;
  status: string;
}

export default function AdminOrders() {
  const [orders, setOrders] = useState<Order[]>([]);
  const [filter, setFilter] = useState<'all' | 'new' | 'confirmed'>('all');

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ localStorage
    const loadOrders = () => {
      try {
        const savedOrders = localStorage.getItem('phiPhiOrders') || '[]';
        const parsedOrders = JSON.parse(savedOrders);
        setOrders(parsedOrders.reverse()); // –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      }
    };

    loadOrders();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(loadOrders, 10000);
    return () => clearInterval(interval);
  }, []);

  const updateOrderStatus = (orderId: number, newStatus: string) => {
    try {
      const updatedOrders = orders.map(order =>
        order.id === orderId ? { ...order, status: newStatus } : order
      );
      
      localStorage.setItem('phiPhiOrders', JSON.stringify(updatedOrders.reverse()));
      setOrders(updatedOrders);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    }
  };

  const clearAllOrders = () => {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–∫–∞–∑—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!')) {
      localStorage.removeItem('phiPhiOrders');
      setOrders([]);
    }
  };

  const filteredOrders = orders.filter(order => {
    if (filter === 'all') return true;
    return order.status === filter;
  });

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
  };

  const formatTimestamp = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleString('ru-RU');
  };

  return (
    <>
      <Header />
      
      <div className="min-h-screen bg-gray-50 pt-16">
        <div className="max-w-7xl mx-auto px-4 py-8">
          
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="bg-white rounded-lg border p-6 mb-6">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold text-gray-900 mb-2">
                  –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–∫–∞–∑–æ–≤
                </h1>
                <p className="text-gray-600">
                  –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {orders.length} | –ù–æ–≤—ã—Ö: {orders.filter(o => o.status === 'new').length}
                </p>
              </div>
              
              <div className="flex items-center space-x-4">
                {/* –§–∏–ª—å—Ç—Ä */}
                <select
                  value={filter}
                  onChange={(e) => setFilter(e.target.value as any)}
                  className="px-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                >
                  <option value="all">–í—Å–µ –∑–∞–∫–∞–∑—ã</option>
                  <option value="new">–ù–æ–≤—ã–µ</option>
                  <option value="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ</option>
                </select>
                
                {/* –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ */}
                <button
                  onClick={clearAllOrders}
                  className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm"
                >
                  –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                </button>
              </div>
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ */}
          {filteredOrders.length === 0 ? (
            <div className="bg-white rounded-lg border p-8 text-center">
              <AlertCircle className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç</h3>
              <p className="text-gray-600">
                {filter === 'all' ? '–ü–æ–∫–∞ —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –∑–∞–∫–∞–∑–æ–≤' : `–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${filter}"`}
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {filteredOrders.map((order) => (
                <div key={order.id} className="bg-white rounded-lg border p-6 hover:shadow-md transition-shadow">
                  
                  {/* –°—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è */}
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center space-x-3">
                      <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                        order.status === 'new' 
                          ? 'bg-yellow-100 text-yellow-800'
                          : order.status === 'confirmed'
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {order.status === 'new' ? 'üÜï –ù–æ–≤—ã–π' : order.status === 'confirmed' ? '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : order.status}
                      </span>
                      
                      <span className="text-sm text-gray-500">
                        –ó–∞–∫–∞–∑ ‚Ññ{order.id}
                      </span>
                    </div>
                    
                    <div className="text-sm text-gray-500 flex items-center">
                      <Clock className="w-4 h-4 mr-1" />
                      {formatTimestamp(order.timestamp)}
                    </div>
                  </div>

                  {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                  <div className="grid md:grid-cols-3 gap-6">
                    
                    {/* –¢—É—Ä –∏ –¥–∞—Ç–∞ */}
                    <div>
                      <h3 className="font-semibold text-gray-900 mb-3">{order.tour}</h3>
                      
                      <div className="space-y-2 text-sm">
                        <div className="flex items-center text-gray-600">
                          <Calendar className="w-4 h-4 mr-2" />
                          <span>{order.date ? formatDate(order.date) : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                        </div>
                        
                        <div className="flex items-center text-gray-600">
                          <Users className="w-4 h-4 mr-2" />
                          <span>
                            {order.adults} –≤–∑—Ä.
                            {order.children > 0 && `, ${order.children} –¥–µ—Ç.`}
                          </span>
                        </div>
                      </div>
                    </div>

                    {/* –ö–æ–Ω—Ç–∞–∫—Ç—ã */}
                    <div>
                      <h4 className="font-semibold text-gray-900 mb-3">–ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
                      
                      <div className="space-y-2 text-sm">
                        <div>
                          <span className="text-gray-600">–ò–º—è: </span>
                          <span className="font-medium">
                            {order.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                          </span>
                        </div>
                        
                        <div className="flex items-center">
                          <Phone className="w-4 h-4 mr-2 text-gray-400" />
                          <span className="font-medium">
                            {order.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                          </span>
                          
                          {order.phone && (
                            <a 
                              href={`tel:${order.phone}`}
                              className="ml-2 text-green-600 hover:text-green-700 text-xs"
                            >
                              –ü–æ–∑–≤–æ–Ω–∏—Ç—å
                            </a>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* –¶–µ–Ω–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
                    <div>
                      <h4 className="font-semibold text-gray-900 mb-3">–°—Ç–æ–∏–º–æ—Å—Ç—å</h4>
                      
                      <div className="text-2xl font-bold text-green-600 mb-4">
                        {order.totalPrice.toLocaleString('ru')} ‚ÇΩ
                      </div>
                      
                      <div className="space-y-2">
                        {order.status === 'new' && (
                          <button
                            onClick={() => updateOrderStatus(order.id, 'confirmed')}
                            className="w-full px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm flex items-center justify-center"
                          >
                            <CheckCircle className="w-4 h-4 mr-2" />
                            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                          </button>
                        )}
                        
                        {/* Telegram —Å—Å—ã–ª–∫–∞ */}
                        <a
                          href={`https://t.me/phuketGoo?text=–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ –∑–∞–∫–∞–∑—É ‚Ññ${order.id} (${order.tour})`}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm text-center block"
                        >
                          üì± –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
      
      <Footer />
    </>
  );
}