import { validateTour } from '../lib/tours';
import { tours } from '../data/tours';

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤
export const validateAllTours = () => {
  console.log('üîç –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—É—Ä–æ–≤...\n');
  
  let totalErrors = 0;
  let totalWarnings = 0;
  
  tours.forEach((tour, index) => {
    console.log(`üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–∞ ${index + 1}/${tours.length}: "${tour.title}"`);
    
    const validation = validateTour(tour);
    
    if (!validation.isValid) {
      console.log(`‚ùå –û—à–∏–±–∫–∏ (${validation.errors.length}):`);
      validation.errors.forEach(error => {
        console.log(`   ‚Ä¢ ${error}`);
      });
      totalErrors += validation.errors.length;
    } else {
      console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    }
    
    if (validation.warnings && validation.warnings.length > 0) {
      console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (${validation.warnings.length}):`);
      validation.warnings.forEach(warning => {
        console.log(`   ‚Ä¢ ${warning}`);
      });
      totalWarnings += validation.warnings.length;
    }
    
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  });
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
  console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:');
  console.log(`   –í—Å–µ–≥–æ —Ç—É—Ä–æ–≤: ${tours.length}`);
  console.log(`   –í–∞–ª–∏–¥–Ω—ã—Ö —Ç—É—Ä–æ–≤: ${tours.filter(tour => validateTour(tour).isValid).length}`);
  console.log(`   –¢—É—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: ${tours.filter(tour => !validateTour(tour).isValid).length}`);
  console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: ${totalErrors}`);
  console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${totalWarnings}`);
  
  if (totalErrors === 0) {
    console.log('üéâ –í—Å–µ —Ç—É—Ä—ã –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.');
  }
  
  return {
    totalTours: tours.length,
    validTours: tours.filter(tour => validateTour(tour).isValid).length,
    totalErrors,
    totalWarnings
  };
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞ –ø–æ slug
export const validateTourBySlug = (slug: string) => {
  const tour = tours.find(t => t.slug === slug);
  
  if (!tour) {
    console.log(`‚ùå –¢—É—Ä —Å slug "${slug}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return null;
  }
  
  console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—É—Ä–∞: "${tour.title}"`);
  const validation = validateTour(tour);
  
  if (validation.isValid) {
    console.log('‚úÖ –¢—É—Ä –≤–∞–ª–∏–¥–µ–Ω');
  } else {
    console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:');
    validation.errors.forEach(error => console.log(`   ‚Ä¢ ${error}`));
  }
  
  if (validation.warnings?.length) {
    console.log('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
    validation.warnings.forEach(warning => console.log(`   ‚Ä¢ ${warning}`));
  }
  
  return validation;
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ dev —Ä–µ–∂–∏–º–µ
if (import.meta.env.DEV) {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è –≤ dev —Ä–µ–∂–∏–º–µ
  setTimeout(() => {
    console.log('\nüöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç—É—Ä–æ–≤ –≤ dev —Ä–µ–∂–∏–º–µ:\n');
    validateAllTours();
  }, 1000);
}

export default validateAllTours;